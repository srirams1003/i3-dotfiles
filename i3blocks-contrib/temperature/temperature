#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use Getopt::Long;

binmode(STDOUT, ":utf8");

# Default values
my $t_warn = $ENV{T_WARN} || 70;
my $t_crit = $ENV{T_CRIT} || 90;
my $chip = $ENV{SENSOR_CHIP} || "";
my $temperature = -9999;

sub help {
    print "Usage: temperature [-w <warning>] [-c <critical>] [--chip <chip>]\n";
    print "-w <degrees>: warning threshold to become yellow\n";
    print "-c <degrees>: critical threshold to become red\n";
    print "--chip <chip>: sensor chip\n";
    exit 0;
}

GetOptions("help|h" => \&help,
           "w=i"    => \$t_warn,
           "c=i"    => \$t_crit,
           "chip=s" => \$chip);

# Parse sensors output
my $in_package_block = 0;

open (my $fh, "-|", "sensors -u $chip") or die "Failed to run sensors: $!";
while (my $line = <$fh>) {
    # Detect start of 'Package id 0' block
    if ($line =~ /^Package id 0/) {
        $in_package_block = 1;
        next;
    }

    # If in 'Package id 0' block, extract temp input
    if ($in_package_block) {
        if ($line =~ /^\s*temp\d+_input:\s+([\d.]+)/) {
            $temperature = $1;
            last;
        }
        # Stop searching if we move into another chip block
        elsif ($line !~ /^\s/ && $line !~ /^$/) {
            $in_package_block = 0;
        }
    }
}
close($fh);

$temperature == -9999 and die 'Cannot find temperature for Package id 0';

# Print short_text and full_text
my $temp_int = int($temperature + 0.5);  # round
print "$temp_intÂ°C\n" x 2;

# Print color, if needed
if ($temperature >= $t_crit) {
    print "#FF0000\n";
    exit 33;
} elsif ($temperature >= $t_warn) {
    print "#FFFC00\n";
}

exit 0;
